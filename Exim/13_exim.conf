filter {
  if [mode] == "exim" {

    # preformat log received from extra input
    if [exim_flag] == "<=" {
      grok {
        patterns_dir   => "/etc/logstash/patterns.d"
        match          => [ "message", "%{EXIM_RECEIVED}" ]
        tag_on_failure => [ "_grok_exim_received_nomatch" ]
        add_tag        => [ "_grok_exim_success" ]
        add_field      => [ "exim_msg_state", "Received" ]
      }
    } else if [exim_flag] == "=>" or [exim_flag] == "->" {
      grok {
        patterns_dir   => "/etc/logstash/patterns.d"
        match          => [ "message", "%{EXIM_DELIVERY}" ]
        tag_on_failure => [ "_grok_exim_delivery_nomatch" ]
        add_tag        => [ "_grok_exim_success" ]
        add_field      => [ "exim_msg_state", "Delivered" ]
      }
    } else if [exim_flag] == "**" {
      grok {
        patterns_dir   => "/etc/logstash/patterns.d"
        match          => [ "message", "%{EXIM_FAIL}" ]
        tag_on_failure => [ "_grok_exim_fail_nomatch" ]
        add_tag        => [ "_grok_exim_success" ]
        add_field      => [ "exim_msg_state", "Failed" ]
      }
    } else if [exim_flag] == "==" {
      grok {
        patterns_dir   => "/etc/logstash/patterns.d"
        match          => [ "message", "%{EXIM_DEFER}" ]
        tag_on_failure => [ "_grok_exim_defer_nomatch" ]
        add_tag        => [ "_grok_exim_success" ]
        add_field      => [ "exim_msg_state", "Deferred" ]
      }
    }
  }

  # Do some data type conversions
  mutate {
    rename => [
      "exim_date", "Date",
      "[agent][hostname]", "Host",
      "exim_msgid", "Queue ID",
      "exim_flag", "Flags",
      "exim_msg_size", "Size",
      "exim_remote_hostname", "Remote Hostname",
      "exim_remote_heloname", "Remote Helo",
      "exim_remote_ip", "Remote IP",
      "exim_remote_port", "Remote Port",
      "exim_from", "From",
      "exim_to", "To",
      "exim_relay_hostname", "Relay Hostname",
      "exim_relay_heloname", "Relay Helo",
      "exim_relay_ip", "Relay IP",
      "exim_relay_port", "Relay Port",
      "exim_subject", "Subject",
      "exim_code", "Code",
      "exim_msg_state", "Action",
      "exim_responses", "Responses",
      "exim_router", "Router",
      "exim_transport", "Transport",
      "domain_sent", "Domain Sent",
      "domain_receive", "Domain Received",
      "domain_auth", "Domain Auth",
      "mailbox_auth", "Mailbox Auth",
      "file_reject", "File Reject",
      "content_type", "Content Type",
      "extra_field", "Extra"
    ]
  }

  # Aggregate EXIM
  if [Flags] == "<=" and [From]{
    aggregate {
      task_id => "%{Queue ID}"
      code => "
        map['From'] ||= event.get('From')
        map['Date'] ||= event.get('Date')
        map['Size'] ||= event.get('Size')
        map['Domain Sent'] ||= event.get('Domain Sent')
        map['Domain Auth'] ||= event.get('Domain Auth')
        map['Mailbox Auth'] ||= event.get('Mailbox Auth')
        map['Remote Hostname'] ||= event.get('Remote Hostname')
        map['Remote Helo'] ||= event.get('Remote Helo')
        map['Remote IP'] ||= event.get('Remote IP')
        map['Remote Port'] ||= event.get('Remote Port')
        map['Subject'] ||= event.get('Subject')
      "
      map_action => "create_or_update"
    }
  } else if [Flags] =~ /[-=>*]>|[*]{2}|==/ and [To]{
    aggregate {
      task_id => "%{Queue ID}"
      code => "
        event.set('From', map['From'])
        event.set('Date', map['Date'])
        event.set('Size', map['Size'])
        event.set('Domain Sent', map['Domain Sent'])
        event.set('Domain Auth', map['Domain Auth'])
        event.set('Mailbox Auth', map['Mailbox Auth'])
        event.set('Remote Hostname', map['Remote Hostname'])
        event.set('Remote Helo', map['Remote Helo'])
        event.set('Remote IP', map['Remote IP'])
        event.set('Remote Port', map['Remote Port'])
        event.set('Subject', map['Subject'])
      "
      map_action => "update"
      push_map_as_event_on_timeout => true
      timeout => 3600
      add_tag => [ "EXIM" ]
    }
  }

  geoip {
    source      => "Remote IP"
    target      => "geoip"
    database    => "/etc/logstash/GeoLite2-City.mmdb"
    add_field   => [ "[location]", "%{[geoip][longitude]}" ]
    add_field   => [ "[location]", "%{[geoip][latitude]}" ]
  }

  mutate {
    remove_field => [
      "[geoip][real_region_name]",
      "[geoip][continent_code]",
      "[geoip][area_code]",
      "[geoip][dma_code]",
      "[geoip][ip]",
      "[geoip][country_code2]",
      "[geoip][country_code3]",
      "[geoip][latitude]",
      "[geoip][location.lat]",
      "[geoip][location.lon]",
      "[geoip][longitude]",
      "[geoip][timezone]",
      "[geoip][postal_code]",
      "[geoip][region_code]",
      "[geoip][region_name]",
      "[geoip][city_name]",
      "[geoip][location]",
      "location"
    ]
    rename => [
      "[geoip][country_name]", "Country"
    ]
  }
}
