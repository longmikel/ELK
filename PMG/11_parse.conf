filter {
        # preformat log received from filebeat input
        grok {
            match => { "message" => "%{SYSLOGTIMESTAMP} %{SYSLOGHOST} %{DATA:program}(?:\[%{POSINT}\])?: %{GREEDYDATA:extra_field}" }
        }

        # grok log lines by program name (listed alpabetically)
        if [program] =~ /^postfix.*\/qmgr$/ {
            grok {
                patterns_dir   => "/etc/logstash/patterns.d"
                match          => [ "message", "%{PMG_QMGR}" ]
                tag_on_failure => [ "_grok_pmg_qmgr_nomatch" ]
                add_tag        => [ "_grok_pmg_success" ]
                remove_field   => [ "extra_field" ]
                }
        } else if [program] =~ /^pmg.*\-smtp\-filter$/ {
            grok {
                patterns_dir   => "/etc/logstash/patterns.d"
                match          => [ "message", "%{PMG_FILTER}" ]
                tag_on_failure => [ "_grok_pmg_filter_nomatch" ]
                add_tag        => [ "_grok_pmg_success" ]
                remove_field   => [ "extra_field" ]
                }
                mutate {
                split => { "pmg_hits" => "," }
                }
        } else if [program] =~ /^postfix.*\/lmtp$/ {
            grok {
                patterns_dir   => "/etc/logstash/patterns.d"
                match          => [ "message", "%{PMG_LMTP}" ]
                tag_on_failure => [ "_grok_pmg_lmtp_nomatch" ]
                add_tag        => [ "_grok_pmg_success" ]
                remove_field   => [ "extra_field" ]
                }
        } else if [program] =~ /^postfix.*/ {
            mutate {
                add_tag => [ "_grok_postfix_program_nomatch" ]
                }
        }

        # Date for event
        date {
            match => [ "postfix_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            target => "postfix_timestamp"
            timezone => 'Asia/Ho_Chi_Minh'
        }

        # Aggregate PMG Filter

        if [program] =~ /^postfix.*\/qmgr$/ {
        aggregate {
                task_id => "%{pmg_queueid}"
                code => "
                        map['pmg_from'] ||= event.get('pmg_from')
                        map['pmg_domain_sender'] ||= event.get('pmg_domain_sender')
                        map['pmg_msg_size'] ||= event.get('pmg_msg_size')
                        map['pmg_rcpt_number'] ||= event.get('pmg_rcpt_number')
                        "
                        map_action => "create_or_update"
                }
        }

        if [program] =~ /^postfix.*\/lmtp$/ {
        aggregate {
                task_id => "%{pmg_queueid}"
                code => "
                        event.set('pmg_from', map['pmg_from'])
                        event.set('pmg_domain_sender', map['pmg_domain_sender'])
                        event.set('pmg_msg_size', map['pmg_msg_size'])
                        event.set('pmg_rcpt_number', map['pmg_rcpt_number'])
                        "
                }
        aggregate {
                task_id => "%{pmg_queueid_filter}"
                code => "
                        map['Queue ID'] ||= event.get('pmg_queueid')
                        map['From'] ||= event.get('pmg_from')
                        map['Domain Sender'] ||= event.get('pmg_domain_sender')
                        map['Message Size'] ||= event.get('pmg_msg_size')
                        map['Rcpt'] ||= event.get('pmg_rcpt_number')
                        "
                        map_action => "create_or_update"
                }
        }

        if [program] =~ /^pmg.*\-smtp\-filter$/ {
        aggregate {
                task_id => "%{pmg_queueid_filter}"
                code => "
                        map['Host'] ||= event.get('[agent][hostname]')
                        map['Locate'] ||= event.get('[agent][name]')
                        map['Hits'] ||= event.get('pmg_hits')
                        map['Filter ID'] ||= event.get('pmg_queueid_filter')
                        map['Score'] ||= event.get('pmg_score')
                        map['Action'] ||= event.get('pmg_action')
                        map['Rule'] ||= event.get('pmg_rule')
                        map['To'] ||= []
                        if  event.get('pmg_to')
                                map['To'] << event.get('pmg_to')
                        end
                        map['Domain Receiver'] ||= event.get('pmg_domain_receiver')
                        map['Virus'] ||= event.get('pmg_virus')
                        map['Message ID'] ||= event.get('pmg_messageid')
                        map['Process Time'] ||= event.get('pmg_process_time')
                        "
                        map_action => "create_or_update"
                        push_map_as_event_on_timeout => true
                        timeout => 60
                        timeout_code => "
                                        event.set('To', event.get('To'))
                                        "
                        timeout_tags => [ "Filter" ]
                }
        }
}
